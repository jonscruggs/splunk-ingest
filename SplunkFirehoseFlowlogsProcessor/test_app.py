import unittest
from unittest.mock import MagicMock, patch
import app

class TestLambdaHandler(unittest.TestCase):

    def test_securityhub_event(self):
        event = {'invocationId': '333ed486-1758-44a0-a254-1d00395ee2df', 'deliveryStreamArn': 'arn:aws:firehose:us-east-1:095262149203:deliverystream/PUT-S3-iSrnL', 'region': 'us-east-1', 'records': [{'recordId': '49649151869671290752121996979474721123046373639147487234000000', 'approximateArrivalTimestamp': 1707632372143, 'data': 'H4sIAAAAAAAA/9VW3W4aORR+FcvXGOYXmLmbJZAipaSCpJFaqsjYB7A6YyPbA5tGkfoguy/XJ1mNZ4aQJu1GK+VipYho5OPz853zfcf3uABj6Aau7naAU3yWXWW378eLRXY+xh2sDhI0TrGXxEE/8KMk8ELcwbnanGtV7nCKe/RgerAHaU3PACu1sHfbclUbLawGWuAUx4wPWEwHpB9Tj4QJXZNh3x+S1TqMWBIzYH6MO9iUK8O02Fmh5ETkFrTB6WdsgOEvzuHYBcLp53ssOE5xOPSGfjSIwmQYheHAr/7COIi9oRd5vj+IgrAf9geBP0y82BtEURiGSdCPcAdbUYCxtNjh1B94g34YhAPf87xOiwhO8f0S70EboeQSp0vsLXFniQWvP7xkNWBBSFZxPyQsjvskDKKE+Czox14QAY9Xzp6DpSIn9m4H7uKiQQm9K1doIiQXcmMQQdNip7QF7i4ZVWpW29OD6Z4g644pY6qUtk7kpDfusKrMnQReEBEvIL5/5fVTP0lD/5Oz0LBpayoNAWos8ZuDOrBZ4vTzElMtU3ow6Un49HghTXda8ZJZNwInJr3fXzvN92hCmJJWq7w3B262Ym27SW9dY9NLeDQMeRCRfjIISDT0fEKD0CMxDBIa0RWLfG+JvxyhXuL0fomb266S+yX+UOea6brs/1aZw6hiSoPPQq3tgWpAVHI0UnItNqWm1fSi0RbYV9ObSl4aq++cxRw2ZU6t0ndoYankVHNTJ34Gx7l36V1thUENJIg5V+iwBbsFjShqMUIsL40FjbbUILalcgMc2S0gTi1dUQNI0gLQWqsCCWsQhzUtc4v2NC+hi54EOYg8R2sqciTWL/lQLwYWBhmwyCr04/tfHPY/vv/tMBqpYpcLKt0I3y/xwlJbGlfa7PLqNvuYTS+yPy7Gzrg+nAM1Srbteg4IoOxm0YCMdJnXOdnTGoRBQrrkd1oxMAapNVqBkBvENFALvOsC1qFGitc0GV3OJtPz2/n1xfi2ym5yeT07W+KHqjEtWUd1iGnN/cchdf4yYxQTlf+Ttroyjt/NRdN+V5NF1qqU3I0LzcmRCSswluw0ZVYwML19z+96Xa/K56FznOMZLZ6riUtmIrSxlysDeg88sy8LQeB1h0EjBqMamteYXtBXuO53k7D/6TgGVN4dk81uFk2OjpsftNoLDnoiIHeQ3b8NuxawhwqjOsJM6YLm4lultKnnqlpB7vKbziaX8/fZ1fRyll24TC+12AhJXzx+OOnHaQlzyB2gN4t5K6ep15MtCCd6QnQzSKShJuErUhkSx3mS+BAAj/vN1L7k9rhWsptFmtYotf/nZQ71uvhJoP91iH6+8KtGPlN+KZWlb8Xax6obOrUqLmiRPt0rWin7YobN6P3k4P+w4B4cBgVw0QLsZo2pooBGRhoKwZ81NydKIyHX1bw71iiJtupQqTVTWgOzdSOEMSV0qn6YajvYpmlP3ilN9gZxxcoCZN3kujHXuqbH1tqdSXs9rpjpVq8WWtBvSnaZKnqVc5XDExRPkNCndTleLdgWCvrx5PUVeP6Q+B7xhi7qOUjQFd1baf010M34MKUrgbbNCM9H76Yfx2f1Thc2hyfS3q44g8xWlTlHUllUGqh3Y7NIn+xI5+hG6a/rXB2er73xTd3CtxKjqhE7/lolb/N8xMMlWC2zg8nq1+WR7VfzbDqbzs7J+Xg2njfJPNo1DXj2Dp3/6pX5KvK9EYtOhaR9GlJtxVGz6MEcn3n1oBwLfVVVTofTtLmSPkXFvSk+1DL3m0Yl3SCpGvXw5eGh+vkHeNK6raYNAAA='}, {'recordId': '49649151869671290752121996979475930048865988268322193410000000', 'approximateArrivalTimestamp': 1707632372371, 'data': 'H4sIAAAAAAAA/9VW227bOBD9FYIvfbFs6hJb1pvWsVMDqVPYaQO0LgKKGtlEJdIgqXhTI/++ECk5zqXdYIE8LBAkUDgcnjkzZ2YOuAKt6Qau73eAE3yeXqe3n6arVXoxxT0s9wIUTjAZnwXDwI/GAQlxD5dyc6FkvcMJHtC9HsAdCKMHGlituLnf1pkzWhkFtMIJjs+IX8RR7jESUy8cjzOPxv7YGw5pFvnRmGaE4B7WdaaZ4jvDpZjx0oDSOPmONTD8wzqc2odw8v2AeY4THMYk9qNRFI7jKAxHfvMTngVnJCYRCcMzPxwHYRyOSBTFI0JC4vsxGQcx7mHDK9CGVjuc+CMyGoZBOPIJIb2OEZzgwxrfgdJcijVO1piscW+NeW4/ioKE4A8DL6YZeNmQRl44ygIPAhaEw2g4ZnFk7XMwlJeeud+BvbhqWUIf6wzNuMi52GjkoXm1k8pAbi9pWSvm7Ole90+YtceUMVkL41Cd5MYeNpHZk4AEkUcCz/evyTDxx0nof7MWCjZdTLX2gGrj+e2Be1ivcfJ9jakSCd3r5OT55HghSXZK5jUztgROTAZ/vnaK92jiMSmMkuVgCbne8sL040HhuBkUFEZ+EWdeMKahF4UQeXF2xjwaRMXQH46GjNE1/nGkeo2Twxq3t20khzX+7LCmyoX93yKzHDVKaflZycLsqQJERY4mUhR8UyvaVC+abIH91IO5yGtt1L21WMKmLqmR6h6tDBU5Vbl2wM/hWPcW3vWWa9RSgph1hfZbMFtQiKKOI8TKWhtQaEs1YlsqNpAjswWU5hUXqNagBK0AFUpWiBuNcihoXRp0R8sa+ujJK3telqigvES8sE7oMyfy1ae5RhoMMhJ9oHvdWH/oW5omstqVnApbxYc1Xhlqam2jW1xd36Zf0/ll+tfl1Bq7wyVQLUWXsZecAEpvVi3PSNWlA2VOo+AacWHh75RkoDWSBcqAiw1iCqiB3KFzT01k7pQyuVrM5he3yy+X09sG3ezqy+J8jR+a3HR6nbgn5k7+j3Vq/aVaS8Yb/yeZtWEcv9uLuvtuissrZC1yWzG09I5iyEAbb6coM5yBHtwN/D7pkwbPQ+9YygtavWwoFsyMK22uMg3qDvLUvN4LAtIfxSPXDyaOmreYXtI3uB71ozD6diwDKu6PYNObVYvRyvOzknc8BzXjUFrKDu8jsBXcQcORe2EhVUVL/qtptgmxUWVQWnzzxexq+Sm9nl8t0kuL9ErxDRf01eOHk3ychrCE0hJ6s1p2HTUhA9GRcNJSPNUWkteK07O686zovSFlw7PC99uafc3pca6kN6skcRx1f5d1CW5ePOvQ/1pCzy/8Lo0vWr8Q0tD30uxj1K2YujbOaZU8HSxKSvMqwrbwnjn4P0y4B8tBBTnvCLaVxmRVQdtEWgHB306ZM6kQF0VT7VYzUqCt3DfNmkmlgBmXCK51Db0mH7qZDqZN2pNFpUWvUS5ZXYFwSXaJ+aKcOLbG7HQyGOSS6X6zttCK/pKiz2Q1aJzLEp6weMKEOo3LqmrFtlDRryfrV0D82POJR1zLvQABqhF711h/T3RbPkyqpj2btoSXk4/zr9NzN9S5Kdt/W8wvBp1GeivrMkdCmmYoWpa6efp03lqHN1L9LEq5fzn8pjcule/VkpqE7PK39vMO5yMvFmAz0vY6dWvmUfXXy3S+mC8uvIvpYrpswTzatYl4sZAuf7duvkmE76Sm04bS7YhUGX7sXXSvj/ueq4xjoG+KyvbjJGmvJE9ZsZvFZ9fu/pCocX/kk2928D80v/4BSSelSa8NAAA='}, {'recordId': '49649151869671290752121996979477138974685602897496899586000000', 'approximateArrivalTimestamp': 1707632372391, 'data': 'H4sIAAAAAAAA/81WbW/bOAz+K4I+V4n8ktjxN1+adAG6dIi7FdgyFLJMJ8LZViDJzWVF//vBkpOla3crDjfggCJFIop6+JAPyUdcg9ZsA7eHHeAEX6a36f37WZalVzN8geW+AYUTTCcjf+x74cSnAb7AldxcKdnucIKHbK+H8ACN0UMNvFXCHLZt7owyo4DVOME+TMpxHuQkiMKABD71SRzlAWERz/NxToHREb7Aus01V2JnhGzmojKgNE6+YA0cf7UOZ/YhnHx5xKLACQ5iGnthFAaTOAyCyOv+gpE/ojENaRCHYRCFkR+PxiMaBNE4mHgBjfxxiC+wETVow+odTryIRuPADyKPUnpxZAQn+HGNH0BpIZs1TtaYrvHFGovCfonycgQhiwn3/JJMAAoy5lFOCj8uc8YDDzhY+wIMExUxhx3Yi1nPEnrX5mgumkI0G40IWtQ7qQwU9pKWreLOnu314IxZe8w4l21jHKqz3NjDLjJ74lM/JNQnnndLx4k3SQLvs7VQsDnG1GoCTBvi9QfuYb3GyZc1ZqpJ2F4nZ88npwtJslOyaLmxJXBmMvzna+d4TyaEy8YoWQ2z7P3AG5aOliHN/Zh60Yj4eRGT0B8VZOLnnISTOAjLGMYhK9b464nlNU4e17i/bYN4XOMPDmaqXMT/LihLTyeSnppMlmbPFCDWFGgqm1JsWsW6wkXTLfA/9XDRFK026mAtVrBpK2akOqDMsKZgqtAO+CWcSt7Cu90KjdK7DPWMIG7dof0WzBYUMltAac2+yQbNpj4SjTas4aCRaNBBtgr1tYE6cDVr2AYKlB+sy+ygDdQavbc/q4ENairrXSU6H469zDDTaotleXN7n35KF9fpH9cza+wOV8C0bI78vowA7GuOFaTaClApO+RCn6ISFnAXzE5JDlojWaIcRLNBXAEzUDh07qmpLFxJT2+W88XV/erj9ey+Qze/+bi8XOOnjsmjsKbuiYXTqS0o6yrVWnLRuT5LgY3g9L2/o4/fuyogpWybwqaWVeRUsDloQ3aKcSM46OHD0BvQAe2gPF2cam7J6peit2DmQmlzk2tQD1Ck5nW9+v4gDKjT7NSx8hbTa/YG19EgpuHnUwWw5nACm95lPUarow9KPogC1FxAZSl7/D1KyOABOo7cC0upalaJb11DTKiNKofK4lss5zer9+nt4maZXlukN0psRMNePX46y8d5CCuoLKF32erY9RI6bI4knGmfAPfJUWik1xTJD0TrmsR5GVKvLPtqfc3nqfWnd1mSOIqO/1dt5cbEj030lxX044WfZfFFd24aadjvUuv3qHstHdutYHXyvPcrKc2rCPu6+8HB/3wIPdnwayjEkVtbY1zWNfTto5cO/OU0OZcKiabs6tyqRTZoK/fISMSlUsCNy4HQuoWLLhW6rYzr/10vP18jeuAaFZK3NTQuvy4nH5WTxdaYnU6Gw0JyPeiWCmanyIDLetg5lxU8I9CRoM5DslLK+BZq9ulsL/KpFxOPEhrbB6+gAdUp/NhNX6W3rxcuVdeOTV+zq+m7xafZpZu2wlTu5+eDTm9lWxUo/9V4s07upPqzrOT+5Wyb3bmk/a6201G/K97as484v3NhAXZja69TN9JP0r5dpYvlYnlFrmbL2aoH892u5/3FYrj62dr3JqX995I5bxjHXY0pI069ie31ae9y9XGK8U0B2X6bJP2V5Dkhdmf44NrZz3MU0IFv1+anr09P3cffd1yPjzINAAA='}, {'recordId': '49649151869671290752121996979478347900505217526671605762000000', 'approximateArrivalTimestamp': 1707632372420, 'data': 'H4sIAAAAAAAA/9VX227bOBD9FYLPlq2bb3rTunZqILUL222ArYuAIsc2UYk0SMreNMi/L0RKjnJpGyyQhwWCBAKHnDNn5sxM7nEBWpM9bO6OgBP8Id2kt5+m63V6NcUdLM8CFE6wP+6HgzCIx6Ef4Q7O5f5KyfKIE9wjZ92DEwijexpoqbi5O5SZM1obBaTACY79OGPxiHjBjgy9aDAce+MBJd44Dv2ADsOsnwHuYF1mmip+NFyKGc8NKI2Tb1gDxd/tg1PrCCff7jFnOMHRyB8F8TCOxqM4ioZB9RP1w74/8mM/HgSjoB+HA78fhONBNBwP/DAejEaDGHew4QVoQ4ojToKhPxxEYTQMfN/vNIzgBN9v8QmU5lJscbLF/hZ3tpgz+0H6QRhF48AjJGBeFo8GHgthWEVIhvEwimgWWHsGhvDcM3dHsBfXNUvoY5mhGReMi71GHpoXR6kMMHtJy1JRZ0/Outti1h4TSmUpjEPVyo09rCKzJ6Efxp4fekGw8QdJME6i4G9roWDfxFRqD4g2XlAfOMd6i5NvW0yUSMhZJy33yeVCkhyVZCU1tgRaJr3fX2vjvZh4VAqjZN5bA1Vg9CciyB5UN+ztHEO9AEbA2JB4cTYYeLEf7bxsBH2PMRgHfhaRQTTc4u8Xwrc4ud/i+raN536LPzvEqXLB/7f4LFOVXmqW1nJnzkQBIoKhiRQ7vi8VqWoYTQ5Af+jeXLBSG3VnLVawL3NipLpDa0MEI4ppB/wDXKrfwtscuEY1MYjap9D5AOYAChGB0ps1qulCNV9I22+kpCEGGNIlpaD1rszzO5QRDQxJgcwBnEUFUdMDsDKHLtoc4OJtR3iuEd+hVW23pLRUiot9qtf1DYa4RjuS62d3mQSNhDQITiQviYEalUbmQAxi0h4eyKmFgta0AetaeieyOOacCKuB+y1eG2JKbVlZLDe36dd0fp3+dT21xu5wBURL0WT6JZdgCXP5QarMAe2kQqbNMdeIO3qOSlbEIblDGXCxR1RBxahD51xNJHM6mywXs/nV7erL9fS2Qjdbfll82OKHKqeN2ifOxZw1PeBJldtXU60l5ZWXVl3YYC7f9XXdfFel6e1kKZilkeTeRVAZaOMdFaGGU9C9Uy/o+l2/QvXQuQhhQYqXTcmCmXGlzTLToE7AUvN6PwnD7nAcuZ4ycQS9xfSavOHpYTe8PC2LIxF3F7DpzbrGaMX9WckTZ6BmHHJL2f37yHMNJ6g4ch4WUhUk5z+rhp34NqoMcotvvpgtV5/SzXy5SK8t0qXiey7Iq8cPrXy0Q1hBbgm9Wa+arpz4PdGQ0GpIXq2vwpWT10iaeY2+vLoReLaLeAH4uzjzWV3Mr/m5jKv0Zp0kjrbm76rMwY2hZ43/j1X1/MKvMvtioghRR/IeYn6MutZXMxc4KZKn80pJaV5FWNfiswf+P4PzwTJRAOMNzbYEqSwKqLtLrSz4x0l2JhXiYlfJwIpJCnSQZ2QkolIpoMalg2tdQqfKii5zY/NRD67HLaiOQSMmaVmAcKl26fminGoOxhx10usxSXW32olIQX5K0aWy6FWPyxyecPmCD9WOzoquGmQF+dra8EI/GHmB7/kj6/sKBKiqFzR990+k1wVFpap6uKmLejX5OP86/eD2Bm5yaM+AZ6Nbt0YhOnNzQKQ0sqKYtmb2QZY5q6f8kyFvfdxI9WOXy/PL0Tm9cZl+r1ZW5evI3joHGpyPVFmA1Sg869StuJfWsFml88V8ceVdTRfTVQ3m0a7O0ItlePWrVfdNSn1XybV7T7OfEmX4pc2Rs77smq6SLuG+KTbbupOkvpI85cZuJ59dZ/xNusbdOK7+a3j4/vBQ/foXE/7NGjEOAAA='}, {'recordId': '49649151869671290752121996979479556826324832155846311938000000', 'approximateArrivalTimestamp': 1707632372887, 'data': 'H4sIAAAAAAAA/81W227bOBD9FYIv3QUsWzdLst60iZMaSJ3CShugdRHQ1MgmKpECSdmbBvn3hUjJddq0DRZbYF/iCBzOnDkzZ4YPuAalyBZu7hvAKT7PbrK7N/M8zy7neITFgYPEKXZnUz/yvXDmuwEe4UpsL6VoG5ziCTmoCeyBazVRQFvJ9P2u3VijXEsgNU5xHG9CSgLP2SQkcYKgiJ1ZFPpOEnm0DMO4INMSj7BqN4pK1mgm+AWrNEiF049YAcWfjMO5CYTTjw+YFTjFQeImXhiHoe/GQRhOk5nnJUngBZ6X+NMw8oMombr+zJsmbjz1osCL4lmYJHiENatBaVI3OPViN44CP4h913VHAyM4xQ9rvAepmOBrnK6xu8ajNWaF+fDjTeBGbun4xIsd1y1DJyxJ4ngQBmHihjOaTI19AZqwytH3DZiLec8Set1u0AXjBeNbhRy0qBshNRTmkhKtpNaeHNT4hFlzTCgVLdcW1UltzGGXmYXo+qHj+o7n3bhR6s3SwP9gLCRsh5xa5QBR2vH6AxtYrXH6cY2J5Ck5qPQkfHq8kKaNFEVLtWmBE5PJz6+d4j2aOFRwLUU1yYOx501KS8vEi30SRX7keDSiTrgJwNlEU3BmcUBLiDYJjegafzqyvMbpwxr3t00SD2v81sLMpM343yVl6OlE0lOTi1IfiAREeIHOBC/ZtpWka1x0tgP6WU0WvGiVlvfGYgXbtiJayHuUa8ILIgtlgZ/DseUNvJsdU6hnA1HjCh12oHcgUR4gowC0FJqVjJp4CnUwgJNNBQUSHBGOspp8ERzlrG4qQLkWkmwB5SD3jAL6YzgO/kSbln4GPUY3OzhGLQmrFGLlz+JxoZ/EPDpalOhetKiRYs8KQLRVWtRoT6oWFCqFRHoH6JWZGIbOV6ghktSgQY7M2YCiIUqBQoJX9x2WXyU+uFYNUFYyKFCnOIVEiex4GpsSnom6qRjhRlwPa5xroltlmF9e39xl77PFVfbX1dwY28MVECX40E3f1wtQdpv3PYBkW0GP5aSOTCHGDbxGCgrKwNoA41tEJRANhUVnQ52Jwgr47Hp5sbi8W727mt916C6u3y3P1/ix65thjJzZEAs7lYx8jKtMKUFZ5/qk4UwGx+/+jhq+u553StHywvBLKucozw0o7TSSUM0oqMl+4o3dsfs8lLdDPYeA77vid/93xkvST6evLdC5eRwdhXq0OJ2UJqcLJpW+3iiQeygy/fyQ871x4vWD7syS+xLTK/IC18nYcwfXom4Ivz+CzW7zHqMZPm9t/8sLBpVh/uH3jI8c9tBxZCMshaxJxb50WyR1TVYbqAy+xfLievUmu1lcL7Mrg/Rasi3j5Nnjx5N6nKawgsoQepuvhlWRuhM+kHAyMB0VOKbEDj/VrNPr1Yk3bkRiIH3fP+f2uDKz2zxNLUvD76qtwK7Cb5bPL5vo2ws/KuR3W41zocnv0v3XrHtVDmuKkTp9ujOlEPpZhH3rfePgf768H036NRRs4Na0GRV1Df0g6tUDf1tZXgiJGC+7VjeCERztxAFpgaiQEqi2NWBKtTDqSqHaSpsidPV68vzqgStUCNrWwG19bU3eSauMndaNSieTQlA17h5jxGzPMRX1pHMuKnhCoCVBnqZk1JTTHdTk/cl70ne9xPFcx01MwEvgIDuRD3P5WXr7fqFCdoNd9z27Onu9eD8/t68Upqu+94N+LSukdqKtCrQje7D7ED2R5bBGjYNbIT+XlTh8vyHnt7Zgv2vqdLQ3xUtH9oDzKw8GYLf8DiqzT+SjrG9W2WK5WF46l/PlfNWD+WrXc/7dY3r1o6fyi1T238vldFgM71siNTvOJXJQx7eq7Y1jji9KyMzaNO2vpE8JMev+rR1lP65R4I4DL/5g1vpj9+cfFh0JAWYOAAA='}, {'recordId': '49649151869671290752121996979480765752144446922459971586000000', 'approximateArrivalTimestamp': 1707632374933, 'data': 'H4sIAAAAAAAA/81WbW/bOAz+K4I+R4nfkjj+5qVJF6CXFkm3ApuHQpboRJhtBZLcXFb0vx8sOVn6srvicAPuS1NZJEU+5EPyEVegNd3A7WEHOMEX6W16/8dsvU4vZ7iH5b4GhRPsTYbBKPCjSeCFuIdLublUstnhBA/oXg/gAWqjBxpYo4Q5bJvcCa2NAlrhBHNaBJAXQxL4E5+EbDQhdBSHpBjTyIujohjR1q5ucs2U2Bkh67koDSiNk69YA8PfrMGZfQgnXx+x4DjBYezFfjSOotEwDIeTaBJ68SSKwvE4GsW+Px5OxkN/NAnC0I+DIIz8cDgejmIP97ARFWhDqx1O/LE3HoVBOI48z+sdEcEJfszwAygtZJ3hJMNehnsZFtweJnkwDLgXkmjshSQcU07o0AsIHY+LURxDEE+YledgqCiJOezAKq47lNDHJkdzUXNRbzQiaFHtpDLArZKWjWJOnu51/wxZe00Zk01tnFdnubGXbWT2JvCCiHgB8f1bb5T4kySMvlgJBZtjTI0mQLUhfnfhHtYZTr5mmKo6oXudnD2fnBSSZKckb5ixJXAmMvh7tXN/TyKEydooWQ7WYT8eFA6VAR/7Iz9gBfFyLyARcE4mw8AjRVzQohj5PI+9DH87gZzh5DHDnbaN4THDN87LVLmA/11MFp2WIx0ya1mYPVWAaM3RVNaF2DSKtnWLpltg3/VgUfNGG3WwEivYNCU1Uh3Q2tCaU8W1c/wCThVv3bvdCo06MBCzppAoUFrRH7JG6xDlDfsORqMtfYDugEp4gBLtmrwUDFHGQGuUl7LVpbtdKYD30TPDBRWltUvrA5IFMtsXtjQYY+uyjVGDQUaiLMtwQUsN7T/dawkSm1oquLGnlJW65152H25kKdjh2Scno0AbJZhx3z64mPoW5amsdqWgtS3/xwyvDTWNtuAsr2/v08/p4ir9cDWzwu5yBVTL+pjw15ACSu/WXZqQakpAhVTInCMiNBK1xWGnpAVQFigHUW8QU0ANcOede2oquaPY9Ho5X1zerz5dze5b7+bXn5YXGX5qU3sk+tQ9sXB9oy1waynVWjLRWj4rCRvA6dyp6OO5rUpSyKbmttRoSU78yUEbslOUGcFADx4Gft/re60nT70TB5a0et2DrDNzobS5zjWoB+Cpebt9BEHfjwPXQqYOlPeIXtF3mI77URh/ORUArQ8nZ9O7deej5fWNkg+Cg5oLKC1kj7+HmWt4gBYj98JSqoqW4kfbnxPPRpVDaf1bLOfXqz/S28X1Mr2ynl4rsRE1ffP66Swf5yGsoLSA3q1XxyaceIP6CMJZLyI6JI6sxJKVOCoSR3yyU3IrcmGAE6DBZMI93lXuWw+cxlJ6t04Sh9fxd9WU4MbNiwb/j+X0UuFXKX01OepaGvq7mPsz6o5Yx1kgaJU8n0tKSvOmh10RvjDw/x6QTzb6Crg4Qmvrjcmqgq6VdDSCPx0/51IhURdtzVvmyBpt5b4dAkwqBcy4FAitG+i1mdBNaWwO2nQ923A6vzXikjUV1C69LiWflKPI1pidTgYDLpnut/sOteOuz2Q1aI3LEp7hZzFQ5xFZVq3ZFir6+WxjCzw/Jr5HPNdyL6EG1ZL92FjfArcrFiZV25hNV7Cr6cfF59mF2wOEKbvCD9GHdrQhN8dQ6mZvNz2R3sqm5CgHBDXNS+CImrNZ6+hrTd5J9b0o5f71yJvduQT+rnbUpmHH39vLj37+RMY62I6zvU7dVnpi+e0qXSwXy0tyOVvOVp0zP+W6JLzaX1e/2k7fRbr/nD3nreO4UlJlxKlL0b0+rYeuWE4hvise23mTpFNJnuNhN4kb19h+naLQ70f+6Isd90/tn78AsFfSe9gNAAA='}, {'recordId': '49649151869671290752121996979481974677964061551634677762000000', 'approximateArrivalTimestamp': 1707632374943, 'data': 'H4sIAAAAAAAA/81WXW8aORT9K5afMcwXzMfblECKlCUR0EZqqSKP5wJWZmxke8KmUf77auyBkibdjVZbaV8SDb62zz33nnP9hGvQmm5h9bgHnOGLfJXf/TFZLvPLCe5heRCgcIa9dBiMAj9KAy/EPVzJ7aWSzR5neEAPegAPIIweaGCN4uZx1xQuaGkU0BpnOB75rAziiAw3EZCw8Bgp4rAgw2EQJ1COyjAJcA/rptBM8b3hUkx5ZUBpnH3FGhj+Zg+c2Itw9vUJ8xJnOEy8xI/iKBoNw3CYRmnoJWkUhXEcjRIvTcLUH6b+0B+NvDBJwpEXDodJ5Hm4hw2vQRta73Hmx148CoMwjjzP6x0ZwRl+WuMHUJpLscbZGntr3FtjXrqPkkZJ5I1ICKOElP4wJEEUxGSYlglNC48GqYsvwVBeEfO4B7tx2bGEPjYFmnJRcrHViKBZvZfKQGk3adko5uLpQffPmLXLlDHZCOOAnNXGLraZ2ZXACyLiBcT3V94o89MsjL7YCAXbY06NJkC1IX634C7Wa5x9XWOqREYPOju7PjttyLK9kmXDjG2Bs5DB3287x3sKIUwKo2Q1WIZ9f7BxrAwiFnubokxI4SUJiQJWEBoXAWGBn/oxjUfhCNb424nkNc6e1rjbbXN4WuMbhzJXLuF/l5Nlp9VIx8xSbsyBKkBUlGgsxYZvG0XbvkXjHbB7PZiJstFGPdqIBWybihqpHtHSUFFSVWoH/AJOHW/hrXZco/x2iTpCELPHocMOzA4UMjtAG1lV8sDFFu2bouIMUcZAa1RUkt0jDcbYlmrhsQ4alGijZI26xkEVPECVIb4VUsGNPSVnlc7QSjXQcye5n29kxdnjGwvn8Qq0UZwZt/KhYfdgusW+pW4s633FqbA9/bTGS0NNo23G8+vVXf45n13lH64mNtgtLoBqKY5VfM0TWJoc90g1VctLyw/XJ+64RlxYyvZKWorkBhXQMscUUAOlQ+euGsvS6WZ8PZ/OLu8Wn64mdy266fWn+cUaP7f1Oqp37K6YOTNou9aelGstGW9PPquzTeD03W3Rx++21chGNqK0/UMrchJFAdqQvaLMcAZ68DDw+17fa5E8906NPaf1a2OxYKZcaXNdaFAPUObmbU8IvH7qBc4Xxo6U94Re0XccnfbDqLOctgGoeDyBzW+XHUYr1hslH3gJasqhspQ9/R65LeEBWo7cDXOpalrx763pZp7NqoDK4pvNp9eLP/LV7HqeX1mk14pvuaBvLj+f1eM8hQVUltDb5eLorJk3EEcSzgyG6JB04iRWnMRpmzhtEys8TfaguCw5I/GQFWkxirv+feua08TJb5dZ5lg7/l80FbhJ8pN3/2NT/bzhV4V9NRSEkIb+Lv3+yLqT19HmOa2zlyNHSWneRNi14k8H/L9n37PNvoaSH6m1XcdkXUNnKJ2Y4E+n0qlUiItN2/lWP1KgnTwgIxGTSgEzrgRc69bYmRS6qYytQVuuF4+XDrdGpWRNDcKV15Xkk3JC2Rmz19lgUEqm++1Thtb0uxR9JutBe7is4AV/lgN1npHV1pLtoKafzx5jgecnxPeIl9j7LkGAaiV/tNe3yO2ahUnV2rPpGnYx/jj7PLlwI56bqmv8EH2w89TNNJS7GdtNV6R3sqlKVAACQYuqe7bdSnW/qeTh9ZCb3Lpi/S4Dainfl+917yPOHyxYgO0AO+jc2dBJ0atFPpvP5pfkcjKfLDowP+I6wl89Qxe/emS+S2D/uVLObeL4MqTK8JMj0YM+vfJcY5xSfFc+1mWzrNuSveTDvh1unIn9ukRh0E/8+Isd8M/tn78A17T9Kp8NAAA='}, {'recordId': '49649151869671290752121996979483183603783676180809383938000000', 'approximateArrivalTimestamp': 1707632374977, 'data': 'H4sIAAAAAAAA/9VWXW/iOBT9K5afCTgfkI+3LIUOUoeOoDOVZhhVjn0B7yQ2sp2ynar/fRUnUPq1W63Uh31pFXxtn3vuOdf3HldgDN3A1d0OcIbP8qv85vNkuczPJ7iH1V6Cxhkm6TAYBX6UBiTEPVyqzblW9Q5neED3ZgC3IK0ZGGC1FvZuWxdt0NJqoBXO8Cga0rRIE28NI+KFBYy81GfcC9aF7wOHNOIE97CpC8O02Fmh5FSUFrTB2Q9sgOGf7sCJuwhnP+6x4DjDYUISP4qjaDQMw2EapSFJ0igK4zgaJX5AwlHkjyIS+L7vB2EakzQehmEU4R62ogJjabXDmR+TeBQGYRwRQnoHRnCG71f4FrQRSq5wtsJkhXsrLLj74IwTQnnhrSHyPZqS1OPDOPCGbJ0O04TGQRG4eA6WitKzdztwG5cdS+hTXaCpkFzIjUEemlU7pS1wt8moWrM2nu5N/4RZt0wZU7W0LaqT2rjFJjO3EpAg8kjg+f4VGWV+moXRdxehYXPIqTYeUGM9v1toLzYrnP1YYaplRvcmO7k+O27Isp1WvGbWSeAkZPDP207xHkM8pqTVqhwsgJutWNv+aLBuuRmko4RSkjCPRX7iRUWQeInvg0eTIuFhxEMaBCv880j1Cmf3K9ztdpncr/CXFmuu27T/W2aOo8YpHT9LtbZ7qgFRydFYybXY1Jo26kXjLbBfZjCTvDZW37mIBWzqklql79DSUsmp5qYFfgZH3Tt4V1thUEcJYu4otN+C3YJGVKK8or+VRAeuECtrY0GjdpNDARzthd0iWltVUSsYqncbTTkYZBWq6J9Ko07bpu/yGqtqVwoqnezuV3hpqa2NgzO/vLrJv+Wzi/yPi4kLbhcXQI2SB4pfJgEov152xCBdl4DWSiN7mpwwSEhkt4B2WjEwBqk1KkDIDWIaqAXeomuvGiveSnt8OZ/Ozm8WXy8mNw266eXX+dkKPzRkHgw2bq+YtX59FJY7LzdGMdGcf1IKl8bxu9toDt+NGry1qiV3Jaald1RvAcZ6O02ZFQzM4Hbg90mfNHgeekftzWn1sgM4MFOhjb0sDOhb4Ll93bwB6Y+iuDXwuKXmPaEX9B1Hx/1hmHw/yoDKuyPY/HrZYXR++qLVreCgpwJKR9n9xzhiCbfQcNTeMFe6oqX43XTHjLisCigdvtl8ern4nF/NLuf5hUN6qcVGSPrq8sNJPU5TWEDpCL1eLg4tMCMDeSDhpAd4uhOS17nOq6iQFmTjHAPWNk3Hc5714jWLCY3TTsGvXXF8FvLrZZa1jB3+L+oS2nb/rMH+q6Ceb3irqC86t5TK0o9y8GPWnbUOXVjQKnv6Lmil7KsIOxk+O+D/8EA9OA4q4OJAsNMdU1UFXUvp7AR/tT6dKo2EXDfadw5SEm3VvunfTGkNzLaFEMbU0GvqYerSuko0RXsyZ3ToDeKK1RXItshtYb7q1ipba3cmGwy4YqbfTB3UPTN9pqpBc7gq4QmLJ0zo07ycx5ZsCxX9djI9BcRPPJ94JHG3noME3Vj/0GbfJrqTD1O6ada2k/Bi/Gn2bXLWvsnClt3Pz55Gs1V1ydGW3sK73kIEkhZlN4VdK/1rXar9ywdxct0W9KPaVFOWHX9vjz/gfGTHAWyeub3J21nx6P2rRT6bz+bn3vlkPll0YB7junK8mCoXb82M77LiB3nqtK0cBj2qrTh2MLo3x6Gt1ccx0Xdl5bpylnVbsqesuGnjS9v03i5USPqjpCnUw8+Hh+bP32jHA890DQAA'}, {'recordId': '49649151869671290752121996979484392529603290809984090114000000', 'approximateArrivalTimestamp': 1707632375208, 'data': 'H4sIAAAAAAAA/81W227bOBD9FYIv+xLauvkivamOnRpIncByG6B1EVDU2CYqkQZJxZsG+feFSFl1mmQbLBBgX2wInCHPnJkzMw+4Aq3pFlb3e8AJPk9X6e2naZalF1N8huVBgMIJ9uJBMAz8KA68EJ/hUm4vlKz3OMF9etB9uANhdF8DqxU397s6d0aZUUArnOCA5sVm6EfEK7ychL6XkziKgfjRKBoFjMb+sHHRda6Z4nvDpZjx0oDSOPmGNTD83V44tQ/h5NsD5gVOcDj2xs0d0XAQhoM4ikNvHEdROBpFw3HkxVHgj4JxFAeDOBqMwmE8CMeDoefhM2x4BdrQao8Tf+SNhmEQjiLP886OjOAEP6zxHSjNpVjjZI29NT5bY17YDxYM83jIKKEDCoSNoiEJvTAkwyAKfT8P/MAHa1+Aobwk5n4P1jFrWUIf6xzNuCi42GpE0LzaS2WgsE5a1oo5e3rQvRNm7TFlTNbCOFQnubGHTWT2JPCCiHgB8f2VN0z8OAmjr9ZCwfYYU60JUG2I3x64h/UaJ9/WmCqR0INOTp5POock2StZ1MzYEjgx6f+72ynezoQwKYySZX95nvWCUX/jeOn7gcdG/sgngxAiEo3HQMYh80gYR4Mg30DuN4R972he4+RhjVtvG8XDGl87nKlyIf+3qCw/jUpabjK5MQeqAFFRoIkUG76tFW0qF012wH7o/lwUtTbq3losYVuX1Eh1jzJDRUFVoR3wc+hq3sJb7bhGLR2I2asQ3yAq0PI8Q+cfECtrbUAhrhEIpu73BgpEDVKgTQ+tdtB5bygvX3UWf5kX/G2YE1ntS06FrcCHNc4MNbW26BZXq9v0Szq/TD9cTq2xO1wC1VIcGX8eE6D0Jmt5QqouAW2kQuY0Vq4RF8jsAO2VZKA1khuUAxdbxBRQA4VD556ayMJV+eRqMZtf3C4/X05vG3Szq8+L8zV+bLg9am3inpg76boas3elWkvGm7tPsmJD6L5bJ338bgqDbGQtCpttWpKuiHPQhuwVZYYz0P27vt/zel6D5fGsK8MFrZ43AgtmxpU2V7kGdQdFal7WsB/34nDgdDxxtLzF9JL++epg3ItGw69dCVBx34FNb7IWo5XWtZJ3vAA141Bayh7eRxwZ3EHDkXthIVVFS/6z0Xzi2ahyKC2++WJ2tfyUruZXi/TSIr1SfMsFffH48SQfpyEsobSE3mTLYydMvL44knDSDogqNGnFRDoZEWpIIyOyifKNV4xoW7Av3doNhPQmSxJH0vF/WZduePzeWv9YQ787vJbHZz1bCGnoewn2V9Stmo49mNMqeToRlJTmRYRt5f12wf99ND3a+Cso+JFcW2ZMVhW0HaRVD/ztZDmTCnGxaUrdCkYKtJMHZCRiUilgxiWBa13DWZMLXZfGZqFJ2JPtokWuUSFZXYFwCXZJ+aycMnbG7HXS7xeS6V6za9CK/pSix2TVby6XJTxhsGVBncZk5ZSxHVT0y8m+FHj+mPge8cb2xQsQoBqVHzvqywS3JcOkanqyact2Ofk4/zI9d1OYmxKOnfxkqGmkd7IuC5TD88lmPW+k+rEp5eH5WJveuFy9V8NpGN8Xb+3WR5y/CLAAm4F10Klb/jpJr5bpfDFfXJCL6WK6bMH8smvZfrYmLl9bAt+ksHeQymmnOG5uVBneNSV60N0W5qqiC/JNEdlGmyStS/KUEbsvXLs+9nqSwqA3iLyvdqQ/Nj//AADOBOdBDQAA'}, {'recordId': '49649151869671290752121996979485601455422905507878273026000000', 'approximateArrivalTimestamp': 1707632375932, 'data': 'H4sIAAAAAAAA/9VWTW/bOBD9KwQve7FsyfqyddM6dmogdQrbbYDWRUBRY5uoRBokFTcN8t8XIiVVadJusEAOe7EhcGb45s2bGT7gEpQiB9jenwAn+CLdprfv55tNejnHAyzOHCROsDsNx9HYC6Zj18cDXIjDpRTVCSd4RM5qBHfAtRopoJVk+v5YZdZooyWQEic4igid5lHoTHIAx48z18l8yJxpBnFIcxrH4OEBVlWmqGQnzQRfsEKDVDj5ghVQ/NUEnJuLcPLlAbMcJ9ifuBMviINgEkd+FE2D0I2DOHRdN/LcSRj6oRdN4sl4Og0DL/TicRyHUz9y8QBrVoLSpDzhxIvdOPLHvnEctIzgBD/s8B1IxQTf4WSH3R0e7DDLzUdOQoj8yHcCOqZO5EfgBJNw4pBonxGPTOPIpcY+B01Y4ej7ExjHTcMSeldlaMF4zvhBIQcty5OQGnLjpEQlqbUnZzXsMWuOCaWi4tqi6tXGHNaZmZOxOw4cd+x43taNEm+a+OFnYyHh0OZUKQeI0o7XHNiL1Q4nX3aYSJ6Qs0p61yedQ5KcpMgrqo0EeiajP7v18XYmDhVcS1GM1pCrI9vroeeO9packRfRkBKyd4JgAk6Q5W6to9gJALwgioKY7IMd/tpxvcPJww433iaVhx3+YMGm0ub931IzJNWt0hC0EXt9JhIQ4TmaCb5nh0qSWr5odgT6TY2WPK+UlvfGYg2HqiBayHu00YTnRObKAr+ATvgG3vbIFGo4QdSEQmyPCEdpSX4IjlqeEC0qpUEiphBwKu9PGnJENJKg9BBtj9CF2RNW2CgvefO/9AsBTMIzUZ4KRrgR5MMObzTRlTI4V9fb2/RTurxK/76aG2N7uAaiBG+5f54doPRm0zCGZFUA2guJdD9rphDjSB8BnaSgoBQSe5QB4wdEJRANuUVnr5qJ3Ip+dr1aLC9v1x+v5rc1usX1x9XFDj/WLLetN7NXLG0n9yRnAqZKCcrqC3pFMnl0342nar9rnTh7UfHcFJ8UTifsDJR2TpJQzSio0d3IG7pDtwb0OOhUuSLl8+FgwCyYVPo6UyDvIE/1y309dodB6NrenlluXmN6RV4ROh4GwfRzpwPC7zuw6c2mwWg67YMUdywHuWBQGMoe3qZXNnAHNUf2hpWQJSnYj3pwJq7JKoPC4FuuFtfr9+l2eb1KrwzSa8kOjJMXjx979einsIbCEHqzWbfTMXFHvCWhNx0c2SjJadrK+VYqBzjJCsidrF5SkZ81on0paLcj0ptNkliO2v91VYCd/b9M23+V0K8OvyvjszHOudDkrZr2Z9ZNM7UTmZEyebokpBD6RYSN8H4J8L/YVo+GhBJy1jJspEZFWUIzRZoOgu+2NRdCIsb3tdxN0wiOjuKMtEBUSAlU20owpSoY1AVRVaFNKeqqPXl1NPAVygWtSuC2yrYyH6XtjqPWJ5WMRrmgali/QYhZPEMqylEdXBTwhMY+FbKfmOmrDT1CST71HlNj15s4nuu4E3PtJXCQdbu3o/UPVDcKokLWE1o3Kl7P3i0/zS/sima6gCfDvd10CqmjqIocZfB83RnfGyG/7Qtxfr7r5je2bm81gGr2T/lrp3eL8ycFBmC9wM4qtQ/Erse363S5Wq4uncv5ar5uwPy0a0h/9pRc/+6h+KqWe6ve6c+P9nVHpGbdqCJn1b3UrDi6TF+Vlhm/SdK4JE9pMS+JD3a6/b5Svjf0vPiz2fOP9c8/5zucqGoNAAA='}, {'recordId': '49649151869671290752121996979486810381242520137052979202000000', 'approximateArrivalTimestamp': 1707632376013, 'data': 'H4sIAAAAAAAA/9VWXW/iOBT9K5afa3A+CCFvWQodpC6MoDOVZhhVJr4BaxIb2Q5sp+p/X8VJKJ22u9VKfdiXVsH32ueee861H3AJxrAt3NzvASf4Mr1J7/6crFbp1QRfYHWUoHGC6WjgR74Xjnwa4AtcqO2VVtUeJ7jPjqYPB5DW9A1klRb2fldtmqCV1cBKnOA45/EgCjYEgnxIgjALySjOPcJDFg4g92Ie1imm2phMi70VSk5FYUEbnHzHBjL8w204cQfh5PsDFhwnOIhp7IXDMIyHURBFo3BAh+FwQCmNPBqHoRcHceiF1PfDaBh4o9ALwmHgx/gCW1GCsazc48Qb0mEU+IFLvOgYwQl+WOMDaCOUXONkjekaX6yx4O4jAhp7Gz8nkGdA8iH3yCgY+oRRDtHGHzE6Yi6eg2WiIPZ+Dy5x1bKEPlUbNBWSC7k1iKBZuVfaAndJRlU6a+LZ0fTOmHXLLMtUJW2D6qw3brGuzK341A8J9Ynn3dAo8UZJMPjmIjRsu5oqQ4AZS7x2oTnYrHHyfY2Zlgk7muTs+OSUkCR7rXiVWSeBs5D+P6ed4z2FkExJq1XRXwI3O5HbXtjPG276PAzygAUBGdEsIGHOYrJho4DQiAdhBBHEEKzxjxPVa5w8rHGb7Sp5WOPPDdZUN2X/t8ocR7VTWn5WKrdHpgExydFYyVxsK81q9aLxDrKfpj+TvDJW37uIJWyrglml79HKMsmZ5qYBfgkn3Tt4NzthUEsJytxW6LgDuwONmERpyX4piTquUFZUxoJGO2YQq7iwqFDbrZBbBJJtCuA9h3ysyn0hmHTCeljjlWW2Mu7A+eLmLv2azq7TP64nLrhZXAIzSnYkvoQJKL1dtaUjXRWAcqWRPYcvDBIS2R2gvVYZGINUjjZQo8s0MNuha44aK96Id7yYT2dXd8sv15O7Gt108WV+ucaPNV2dhcbNEbPGkU/ScfulxqhM1Pufke3KOH23iab7rvtNclVJ7prICnLS5waMJXvNMisyMP1D3+vRHq3xPF6c1DVn5UuPOzBToY1dbAzoA/DUvm5Pn/YiShuLjhtq3hN6zd6xddyLvfjbSQZM3p/AprerFqNzzGetDoKDngooHGUPH6P5FRyg5qg5Ya50yQrxq55/CXVVbaBw+Gbz6WL5Z3ozW8zTa4d0ocVWSPbq8uNZP85LWELhCL1dLbshl9C+7Eg4cznRrZBI6yviPEVaT5HWUyQfcG+4GQ1a9b62/Wnop7erJGnY6v4vqwKaYf7b+PxXMf2e8FZDX8xlKZVlH+Xep6pbW3UzVrAyeT71tVL2VYStBH/b4P9w/Tw6DkrgoiPYaS5TZQntOGmtBH81Hp0qjYTMa9079yiJduqIrEKZ0hoy2zRCGFPBRd0PUxXWdaJu2rNXRIveIK6yqgTZNLlpzBfd2GRn7d4k/T5XmenVbwrmLpFepsp+vbkq4BmLZ0zo87qcv1bZDkr29ext5FMvJh4lNHanXoEEXdu+G7FvE93KJ1O6HtS2lfBy/Gn2dXLZ3LjCFu3Pr198BpmdqgqOduwAr9+AbqNbpX/mhTq+vP4mt00LP2oo1Y3Y8/dO9A7nEx8OYH2pHU3avP1Obr9ZprP5bH5FribzybIF8xTXNuDFK3H51hvwXeb7IBedD5Lu4ca0FaeZxY7m9AhrFHEq9F1VuTmcJG1K8pwV97b43Iy5txsVeL1h4H1zV/9j/edvw2Q7t0QNAAA='}, {'recordId': '49649151869671290752121996979488019307062134766227685378000000', 'approximateArrivalTimestamp': 1707632376148, 'data': 'H4sIAAAAAAAA/81W227bOBD9FYIv+2LakixLst5Ux04NpE5gpw3QuggocWwTlUiDpOJNg/z7QqTkOpdugwUC7IsNgXM9M2dmHnAFWtMtXN/vAaf4LLvObj9NV6vsfIp7WB4EKJxibzwKosAPx4E3xD1cyu25kvUep3hAD3oAdyCMHmgoasXN/a7OndDKKKAVTvEmiBOvyHMCsUfJEKKY0CT0SOyPonDoBfE4DnAP6zrXheJ7w6WY8dKA0jj9hjUU+Ls1OLWOcPrtAXOGUzxMvMQP4zBM4mgYReNw5MVhPPI8L/J9L4lHYeTHQRSPR34QeHEcBdFo6Cch7mHDK9CGVnuc+rEXR8NgaBV7HSI4xQ9rfAdKcynWOF1jb417a8yZ/YgKNmLjxCcsGIUkKEYhSSLmkThh/nAU0XDDQivPwFBeEnO/B6u4alFCH+sczbhgXGw1Imhe7aUywKySlrUqnDw96P4JsvaZFoWshXFRndTGPjaZ2ZfAC0LiBcT3r70o9cfpcPTVSijYdjnVmgDVhvjtg3Os1zj9tsZUiZQedHriPj0qpOleSVYXxrbAicjg39VO4z2KkEIKo2Q5WJ6t+sPRYONwGeQsLmI2jgmwiJIwSjySB0FOgtyDiI3DPIjoGn8/wrzG6cMat9o2i4c1vnJxZsql/N+ysvg0LGmxWcmNOVAFiAqGJlJs+LZWtOlcNNlB8UMP5oLV2qh7K7GEbV1SI9U9WhkqGFVMu8DP4NjzNrzrHdeohQMV1hTiG0RrIytqeIEqLqRCbWOier9VlAHiGoGgeQkMbaRCVKCsoj+lQMuzFWLU0JxqQEVZawOqj5542VBevtGJ+Ms899M46OxalCay2pecCtvAD2u8MtTU2ia3uLy+zb5k84vsw8XUCrvHJVAtRVewl5AAym5WLcxI1SVY5+Y0Ca4RF8jsAO2VLEBrJDcoBy62qFBADTAXnXM1kcyRZHK5mM3Pb5efL6a3TXSzy8+LszV+bErTUXXiXMwd812LWluZ1rLgje2TotoUjt+tku6+m74iG1kLZpuFluTIgRy0IXtFC8ML0IO7gd/3+l4Ty2Pv2MULWr2cIzaYGVfaXOYa1B2wzLw+AgKv7yWRGwMTB8tbRC/oG0wn/STxvx5bgIr7Y7DZzaqN0TLzSsk7zkDNOJQWsof34dYK7qDByHlYSFXRkv9sZmzq2axyKG1888Xscvkpu55fLrILG+ml4lsu6KvPjyf1OE1hCaUF9Ga17AZp6g1EB8LJNCGKadKShjSsI5ZwpCUcaQlHHNUIhH7sj+NN28CveTnul+xmlaYOtO5/WZfg9sazSf3Hnnqu8Lu6vlgBQkhD34vAv7Ju2dWNdE6r9OmCUVKaVyNsO/GZgf/7pnu0+VfAeAeubbtCVhW0E6VlE/ztaDqTCnGxaVrfEkgKtJMHZCQqpFJQGFcErnUNvaYWui6NrUJTsCfHShu5RkwWdQXCFdgV5bNyTNkZs9fpYMBkofvN6ULtFuoXsho0xmUJTxBsUVCnOVl6rYodVPTLyfkVeH5CfI94ifV4DgJUw/puwr4OcNsyhVTNjDZt2y4nH+dfpmduqXNTQjfZ0dmHbplppHeyLhna0Tv442psl6K1eCPVj00pDy/X3/TG1fC9BlNTiT1761Tv4vwFjA2wWWwHnbkb80j162U2X8wX5+R8upgu22B+ybVVeHGNLn93a76Jee9AodMJ0h2IVBl+HFb0oI/HnuuWY5JvysgO4DRtVdKniNi74srNt98Xaej3R2FzrD9+f3xsfv4BBnI0uagNAAA='}, {'recordId': '49649151869671290752121996979489228232881749532841345026000000', 'approximateArrivalTimestamp': 1707632376732, 'data': 'H4sIAAAAAAAA/81WUW/bOAz+K4Keq0SxHSfxmy9NugBdOiTtCmwZCkWmE2G2FEhyc13R/36wZHvp2m3F4QbcSwtHEvnxIz+Sj7gEY9gOrh8OgBN8nl6nd+9n63V6McNnWB0laJxgOhkGcTCIJgEN8Rku1O5Cq+qAE9xnR9OHe5DW9A3wSgv7sK+2/tLaamAlTjDbblkOOSMQhUDCfDAk20lESZzn22HOAwa0fmKqreFaHKxQci4KC9rg5DM2wPEXZ3DmHOHk8yMWGU5wOKbjQTSKhnQyCUdROBnRmNJhHISjYRgOo2EcxuMgGk6GgxGNgiiMYxpOaITPsBUlGMvKA04GIzqKwyAcxZTSs5YRnODHDb4HbYSSG5xsMN3gsw0WmfuIGMvYMAAyHgEnYxYPCGfhlkTxaAwBhzGNwN3PwDJREPtwAPdw3bCE3lVbNBcyE3JnEEGL8qC0hcw9MqrS3N9nR9M7YdYdM85VJa1HdZIbd1hH5k4CGkSEBmQwuKZxMpgkYfzJ3dCwa2OqDAFmLBk0B96x2eDk8wYzLRN2NMmJ+6R7kCQHrbKKW1cCJ1f6v352ire7QriSVquiv16ue0E/97T0g3EW0wmMCQxjTqIsGpAxZEMSDzM+YSHNxxO6wV86ljc4edzg5rUL4nGDP3iYqfYR/7ugHD21SBpq1iq3R6YBMZmhqZK52FWa1YWLpnvgX01/IbPKWP3gbqxgVxXMKv2A1pbJjOnMeODn0JW8g3e9FwY1bCDuTKHjHuweNCrUbifkDgmDQLJtARnKlUZ2DyiDQtyDfkDGMlsZpHIklRW54B5UU9QGGZAWWYUYsuogeGcAZHZQQlrTQ88g5EwUBon8VS/PXNSWOjfCHbYwe46+qSoPhWDSFfbjBq+dERf18ur6Lv2YLi7Tvy5n7rI/XAEzSraZfMkVoPR23fCPdFVAE89JAMIgIR36g1YcjONmCzWPXAOzLTrvaqoyL57p1XK+uLhb3VzO7mp086ub5fkGP9U5ayU89S4WviO40nWmUmMUF7Xpk2S7CLrv5o1pv+t6I7mqZObIZAXppLEFY8lBM24FB9O/7w96tEdrKE9nXXUvWfmyvTgwc6GNvdoa0PeQpfb1zhAEvTAa+u4w9ay85eol+73pkPbiIPzUVQCTDx3Y9HbdYHSK/aDVvchAzwUUjrLHP6O5NdxDzZH3sFS6ZIX4VrfehLqotlA4fIvl/Gr1Pr1eXC3TS4f0SoudkOzV46eTfJyGsILCEXq7XrX9NaF92ZJw0mWIkYY4XZJGSaSVHDnVGml0RYJoFI/jgDcV/JqfbvCkt+sk8bS1/1dV4YfUjy38t1X144OfZfbFbJBSWfanFPw96kZfbbMXrEyeTx6tlH0VYVOLPxj4n4/AJxd+CZlouXV1x1VZQtNSGjnB316nc6WRkHld+05BSqK9OtaTgSutgVufA2FMBWd1KkxVWJeEOl/PlpgGuEGZ4lUJ0ufX5+RGe6nsrT2YpN/PFDe9eqVhJfumZI+rsl8bVwU8I9CToE9DcvJa8z2U7OPJVhbQwZgMKKFj5/ACJOha9W2HfZXepl640nWLtk3NrqbvFh9n537WC1v4ny+bqavyF/PP7FVVZGgLz+bxmwavc3Kr9Ne8UMeX83B265P6p1pVnZpD9tY+3+L8zpUDWI+6o0n9MtpJ/3qVLpaL5QW5mC1nqwbM93tNXl6sraufLaVvUuJ/L6nThtJukkxb0fUudjTdVujrp4vxTQG5fpwkzZPkOSFuz/jg290vZmvUG8SjT24XeKr//AOVvsAn0A0AAA=='}, {'recordId': '49649151869671290752121996979490437158701364162016051202000000', 'approximateArrivalTimestamp': 1707632376885, 'data': 'H4sIAAAAAAAA/9VWy27bOBT9FYKb2Vi2HpZsaadJnYyB1AnsPIDWRUGTVzZRidSQVDxpkH8fiJQcp0naYIAuZpNA5n2ce+7zAVegNdnC1X0NOMMf8qv868fZapWfzfAAy70AhTPsp3GYhME4Df0ID3Apt2dKNjXO8Ijs9QjuQBg90kAbxc39rtk4oZVRQCqc4QjG6YamUy9Ni8SLooR4JB4HXpJGSRxQfzxmBR5g3Ww0Vbw2XIpTXhpQGmefsQaKv1iDM+sIZ58fMGet3ak/DcaTceynaTQZR+nET3w/TsJoEkdxMk6nEz+KJn4cT/w49BM/nUxbHTzAhlegDalqnAUTf5JEYTRJfN8f9IzgDD+s8R0ozaVY42yN/TUerDFn9qMIpjBNSOSxIAZvPI4mXkB94kWbeJrElEwnaWrlGRjCS8/c12AVVx1L6K9mg065YFxsNfLQvKqlMsCskpaNok6e7PXwiFn7TCiVjTAO1VFu7GMbmX0J/XDs+aEXBFd+kgVpFiWfrISCbR9Toz0g2nhB9+Ac6zXOPq8xUSIje50duc8OCllWK8kaamwJHImMfq52jPcg4lEpjJLlaAlM73hhhtGocNyMYJOyaRowr4hY7I0JDb1pEqZektApmYYsDKFY4y8Hqtc4e1jjTttG8rDGlw5rrlzY/y0yy1HbKR0/K1mYPVGAiGDoRIqCbxtF2upFJzug3/RoLlijjbq3EkvYNiUxUt2jlSGCEcW0A/4BDnVv4V3tuEYdJYhaU2i/A7MDhYhAeUW+S4F6rhAtG21AoR3RiDRGVsQAQ1qQWu+k0QgE2ZTABhYFQQoMCIuyBsUlQ1sFpNU3OyKQVAj+bkiJjERmB0jXQHnBgaG2sFChSAVDdLWDA8CC8FIjXrzqmygQf5geAiqkslY7yIPWHS/sTy9gcY1K0NrBehvKtbBS97JBtZJ3nAEiiDbayArVpJVpY7sjZQMH9z/6GqBnbdlo0IggBgVpStPpygJNECP3emjr4ERWdcmJsG36sMYrQ0yjbfoWF1df85t8fp7/eT6zwu5xCURL0Zfky6QDym9XXSEh1ZQ93qNi4BpxR0atJG3jlgXaABdbRG0WmUPnXJ1I5kbBycXidH72dXl9Pvvaoju9uF58WOPHtvj6yE+ci7mbb0+NaO3lWkvKW/tHpWvDOHx3irr/brvHK2QjmG0JUnqHbt+ANl6tCDWcgh7djYKhP/Rfx3PZp7B3eNNmwzXgxLXPgnQT7yMXyz6zlzaxrc3HwaH/D5LH6bYBnnKlzcVGg7oDlpvXB2joD+M4dkP0xNH9HtFz8mvTUTCMwt60rGoi7g9g89tVh9HOtEtX5eqUQ2nT8PB7ptIK7qDlyHlYSFWRkn9vN1Tm26g2UFp888XpxfJjfjW/WOTnFumF4lsuyKvPj0f5OA5hCaUl9Ha17NdQ5o9ET8LRHPZUV5zehtBvTe1108Wj4XgaTGjctcBr9g57OL9dZZmjp/+/bEpw+/WHjfbL6vlR4a0MvliVQkhDftcIeIq6681+7XFSZc8XsZLSvIqwq7kfDPwfLoJHy0EFjPcE2yKjsqqgm0ld78A/rilP22UkirbQbbtIgXZy3y5CKpUCalwiuNYNDNp86HY7mC5pzzZIh14jJmlTgXBJdom5Vq4vdsbUOhuNmKR62J55xO71IZXVqDUuS3jG4hET6jgu21AruoOK3Bydq6EfTL3A9/yp9XoGAlTb5/2cfpvornyoVO20N10JL0/+mt/MPrgjiJuy+/n1W0QjvZNNydCO3EF/GHD68iix5m6l+laUcv9yk85uXSJ/1yxq01Gz9w7yHucTKxZgux/3OndH+aHnr5b5fDFfnHlns8Vs2YF5kuvS8OJ8X751nL+rBX9TLx2Pk/6iJsrww+Qie324jl1dHAJ9V1R2GmdZp5I9Z8WeBZdu2P1kg46HcTz+ZDf+Y/vnX8jaJ9ndDgAA'}]}

        result = app.lambda_handler(event, None)

        self.assertEqual(1,1)

""" 
    def test_single_cloudtrail_event(self):
        event = {
            'invocationId': '26751d97-5a3a-402b-8fd9-62c31da52245', 
            'deliveryStreamArn': 'arn:aws:firehose:us-east-1:095262149203:deliverystream/PUT-S3-iSrnL', 
            'region': 'us-east-1', 
            'records': [
                {
                    'recordId':'49649151869671290752121996979238980588220148415970934786000000', 
                    'approximateArrivalTimestamp': 1707612399585, 
                    'data': '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'}]}
        expected_records =  [
            {
                'data': b'', 
             'result': 'Ok',
             'recordId': '49649151869671290752121996979238980588220148415970934786000000'
             }
             ]

        result = app.lambda_handler(event, None)
        self.assertEqual(result, {'records': expected_records})


    def test_multiple_cloudtrail_events(self):

        event = {
            'invocationId': 'ee581821-7906-4db2-afce-78042888e269', 
            'deliveryStreamArn': 'arn:aws:firehose:us-east-1:095262149203:deliverystream/PUT-S3-iSrnL', 
            'region': 'us-east-1', 
            'records': [
                {
                    'recordId': '49649151869671290752121996979180952148878434078560354306000000', 
                    'approximateArrivalTimestamp': 1707609312210, 
                    'data': ''
                }
                    ]
                }

        expected_records =  [
            {
                'data': b'',
                  'result': 'Ok', 
                  'recordId': '49649151869671290752121996979180952148878434078560354306000000'}]

        result = app.lambda_handler(event, None)

        self.assertEqual(result, {'records': expected_records})


class TestApp(unittest.TestCase):

    def test_transformLogEvent_valid(self):
        log_event = {
            "id": "1",
            "timestamp": 1643160814345,
            "message": '{"key": "value"}'
        }
        expected_result = '{"key": "value"}'
        result = app.transformLogEvent(log_event)
        self.assertEqual(result, expected_result)

    def test_transformLogEvent_invalid(self):
        log_event = {
            "id": "1",
            "timestamp": 1643160814345,
            "message": 'invalid json'
        }
        expected_result = ''
        result = app.transformLogEvent(log_event)
        self.assertEqual(result, expected_result)

    @patch('aiohttp.ClientSession.post')
    async def test_sendEventToSplunk(self, mock_post):
        record = {
            "data": b'eyJtZXNzYWdlIjoiMiA2NDc2MDQxOTUxNTUgZW5pLTA1ZmRkNTgzMTdhM2E1OGU0IDEwLjMwLjIuMjM4IDEwLjMwLjEuMjE3IDgwODkgMzkwMTYgNiAyMiAxMDUyNyAxNjQzMTYwNzMyIDE2NDMxNjA3OTIgQUNDRVBUIE9LIn0='
        }
        expected_result = 'success'
        mock_response = MagicMock()
        mock_response.raise_for_status.return_value = None
        mock_response.text.return_value = 'success'
        mock_post.return_value.__aenter__.return_value = mock_response

        result = await app.sendEventToSplunk(record, MagicMock())
        self.assertEqual(result, expected_result)

    @patch('aiohttp.ClientSession.post')
    async def test_sendEventsToSplunk(self, mock_post):
        records = [
            {"data": b'eyJtZXNzYWdlIjoiMiA2NDc2MDQxOTUxNTUgZW5pLTA1ZmRkNTgzMTdhM2E1OGU0IDEwLjMwLjIuMjM4IDEwLjMwLjEuMjE3IDgwODkgMzkwMTYgNiAyMiAxMDUyNyAxNjQzMTYwNzMyIDE2NDMxNjA3OTIgQUNDRVBUIE9LIn0='},
            {"data": b'eyJtZXNzYWdlIjoiMiA2NDc2MDQxOTUxNTUgZW5pLTA1ZmRkNTgzMTdhM2E1OGU0IDUyLjk0LjIyOC4xNzggMTAuMzAuMi4yMzggNDQzIDM3Mzc4IDYgMjQgNzIxMSAxNjQzMTYwNzMyIDE2NDMxNjA3OTIgQUNDRVBUIE9LIn0='}
        ]
        expected_result = ['success', 'success']
        mock_response = MagicMock()
        mock_response.raise_for_status.return_value = None
        mock_response.text.return_value = 'success'
        mock_post.return_value.__aenter__.return_value = mock_response

        result = await app.sendEventsToSplunk(records)
        self.assertEqual(result, expected_result)

    @patch('boto3.client')
    def test_putRecordsToFirehoseStream_success(self, mock_client):
        streamName = 'test-stream'
        records = [
            {"data": b'eyJtZXNzYWdlIjoiMiA2NDc2MDQxOTUxNTUgZW5pLTA1ZmRkNTgzMTdhM2E1OGU0IDEwLjMwLjIuMjM4IDEwLjMwLjEuMjE3IDgwODkgMzkwMTYgNiAyMiAxMDUyNyAxNjQzMTYwNzMyIDE2NDMxNjA3OTIgQUNDRVBUIE9LIn0='},
            {"data": b'eyJtZXNzYWdlIjoiMiA2NDc2MDQxOTUxNTUgZW5pLTA1ZmRkNTgzMTdhM2E1OGU0IDUyLjk0LjIyOC4xNzggMTAuMzAuMi4yMzggNDQzIDM3Mzc4IDYgMjQgNzIxMSAxNjQzMTYwNzMyIDE2NDMxNjA3OTIgQUNDRVBUIE9LIn0='}
        ]
        client = MagicMock()
        client.put_record_batch.return_value = {'FailedPutCount': 0}
        mock_client.return_value = client

        #self.assertIsNone(app.putRecordsToFirehoseStream(streamName, records, client, attemptsMade=0, maxAttempts=20))

    @patch('boto3.client')
    def test_putRecordsToFirehoseStream_failure(self, mock_client):
        streamName = 'test-stream'
        records = [
            {"data": b'eyJtZXNzYWdlIjoiMiA2NDc2MDQxOTUxNTUgZW5pLTA1ZmRkNTgzMTdhM2E1OGU0IDEwLjMwLjIuMjM4IDEwLjMwLjEuMjE3IDgwODkgMzkwMTYgNiAyMiAxMDUyNyAxNjQzMTYwNzMyIDE2NDMxNjA3OTIgQUNDRVBUIE9LIn0='},
            {"data": b'eyJtZXNzYWdlIjoiMiA2NDc2MDQxOTUxNTUgZW5pLTA1ZmRkNTgzMTdhM2E1OGU0IDUyLjk0LjIyOC4xNzggMTAuMzAuMi4yMzggNDQzIDM3Mzc4IDYgMjQgNzIxMSAxNjQzMTYwNzMyIDE2NDMxNjA3OTIgQUNDRVBUIE9LIn0='}
        ]
        client = MagicMock()
        client.put_record_batch.return_value = {'FailedPutCount': 1, 'RequestResponses': [{'ErrorCode': 'InternalFailure'}, {'ErrorCode': ''}]}
        mock_client.return_value = client

        #with self.assertRaises(RuntimeError):
        #    app.putRecordsToFirehoseStream(streamName, records, client, attemptsMade=0, maxAttempts=20)

    def test_createReingestionRecord(self):
        originalRecord = {"data": b'eyJtZXNzYWdlIjoiMiA2NDc2MDQxOTUxNTUgZW5pLTA1ZmRkNTgzMTdhM2E1OGU0IDEwLjMwLjIuMjM4IDEwLjMwLjEuMjE3IDgwODkgMzkwMTYgNiAyMiAxMDUyNyAxNjQzMTYwNzMyIDE2NDMxNjA3OTIgQUNDRVBUIE9LIn0='}
        expected_result = {'data': b'2 647604195155 eni-05fdd58317a3a58e4 10.30.2.238 8089 39016 6 22 1643160732 ACCEPT OK'}
        result = app.createReingestionRecord(originalRecord)
        self.assertEqual(result, expected_result)

    def test_getReingestionRecord(self):
        reIngestionRecord = {'data': b'2 647604195155 eni-05fdd58317a3a58e4 10.30.2.238 8089 39016 6 22 1643160732 ACCEPT OK'}
        expected_result = {'Data': b'2 647604195155 eni-05fdd58317a3a58e4 10.30.2.238 8089 39016 6 22 1643160732 ACCEPT OK'}
        result = app.getReingestionRecord(reIngestionRecord)
        self.assertEqual(result, expected_result)
 """
if __name__ == '__main__':
    unittest.main()
    
